{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gadget\\\\Desktop\\\\newprj\\\\src\\\\components\\\\Feed.js\",\n  _s = $RefreshSig$();\n// Feed.js\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setPosts } from '../redux/actions';\nimport PostList from './PostList';\nimport AddPostForm from './AddPostForm';\nimport { Grid } from '@mui/material';\nimport useStyles from './styles';\nimport { fetchPosts } from '../api'; // Import the fetchPosts function\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Feed = () => {\n  _s();\n  const dispatch = useDispatch();\n  const posts = useSelector(state => state.posts);\n  const classes = useStyles();\n  useEffect(() => {\n    const getPosts = async () => {\n      try {\n        // Fetch data from API\n        const apiPosts = await fetchPosts();\n        dispatch(setPosts(apiPosts));\n\n        // Check if there are posts in local storage\n        const storedPosts = JSON.parse(localStorage.getItem('posts')) || [];\n\n        // Update local storage only if it's empty\n        if (storedPosts.length === 0) {\n          localStorage.setItem('posts', JSON.stringify(apiPosts));\n        }\n      } catch (error) {\n        console.error('Error loading or fetching posts:', error);\n      }\n    };\n    getPosts();\n  }, [dispatch]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.root,\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 3,\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        md: 8,\n        children: [/*#__PURE__*/_jsxDEV(AddPostForm, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(PostList, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n_s(Feed, \"3HkYI2wmC5WyC6iCwKlykcRu2iU=\", false, function () {\n  return [useDispatch, useSelector, useStyles];\n});\n_c = Feed;\nexport default Feed;\nvar _c;\n$RefreshReg$(_c, \"Feed\");","map":{"version":3,"names":["React","useEffect","useDispatch","useSelector","setPosts","PostList","AddPostForm","Grid","useStyles","fetchPosts","jsxDEV","_jsxDEV","Feed","_s","dispatch","posts","state","classes","getPosts","apiPosts","storedPosts","JSON","parse","localStorage","getItem","length","setItem","stringify","error","console","className","root","children","container","spacing","item","xs","md","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/gadget/Desktop/newprj/src/components/Feed.js"],"sourcesContent":["// Feed.js\r\nimport React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { setPosts } from '../redux/actions';\r\nimport PostList from './PostList';\r\nimport AddPostForm from './AddPostForm';\r\nimport { Grid } from '@mui/material';\r\nimport useStyles from './styles';\r\nimport { fetchPosts } from '../api'; // Import the fetchPosts function\r\n\r\nconst Feed = () => {\r\n  const dispatch = useDispatch();\r\n  const posts = useSelector((state) => state.posts);\r\n  const classes = useStyles();\r\n\r\n  useEffect(() => {\r\n    const getPosts = async () => {\r\n      try {\r\n        // Fetch data from API\r\n        const apiPosts = await fetchPosts();\r\n        dispatch(setPosts(apiPosts));\r\n\r\n        // Check if there are posts in local storage\r\n        const storedPosts = JSON.parse(localStorage.getItem('posts')) || [];\r\n\r\n        // Update local storage only if it's empty\r\n        if (storedPosts.length === 0) {\r\n          localStorage.setItem('posts', JSON.stringify(apiPosts));\r\n        }\r\n      } catch (error) {\r\n        console.error('Error loading or fetching posts:', error);\r\n      }\r\n    };\r\n\r\n    getPosts();\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Grid container spacing={3}>\r\n        <Grid item xs={12} md={8}>\r\n          <AddPostForm />\r\n          <PostList />\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Feed;\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,QAAQ,QAAQ,kBAAkB;AAC3C,OAAOC,QAAQ,MAAM,YAAY;AACjC,OAAOC,WAAW,MAAM,eAAe;AACvC,SAASC,IAAI,QAAQ,eAAe;AACpC,OAAOC,SAAS,MAAM,UAAU;AAChC,SAASC,UAAU,QAAQ,QAAQ,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAErC,MAAMC,IAAI,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjB,MAAMC,QAAQ,GAAGZ,WAAW,CAAC,CAAC;EAC9B,MAAMa,KAAK,GAAGZ,WAAW,CAAEa,KAAK,IAAKA,KAAK,CAACD,KAAK,CAAC;EACjD,MAAME,OAAO,GAAGT,SAAS,CAAC,CAAC;EAE3BP,SAAS,CAAC,MAAM;IACd,MAAMiB,QAAQ,GAAG,MAAAA,CAAA,KAAY;MAC3B,IAAI;QACF;QACA,MAAMC,QAAQ,GAAG,MAAMV,UAAU,CAAC,CAAC;QACnCK,QAAQ,CAACV,QAAQ,CAACe,QAAQ,CAAC,CAAC;;QAE5B;QACA,MAAMC,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE;;QAEnE;QACA,IAAIJ,WAAW,CAACK,MAAM,KAAK,CAAC,EAAE;UAC5BF,YAAY,CAACG,OAAO,CAAC,OAAO,EAAEL,IAAI,CAACM,SAAS,CAACR,QAAQ,CAAC,CAAC;QACzD;MACF,CAAC,CAAC,OAAOS,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;MAC1D;IACF,CAAC;IAEDV,QAAQ,CAAC,CAAC;EACZ,CAAC,EAAE,CAACJ,QAAQ,CAAC,CAAC;EAEd,oBACEH,OAAA;IAAKmB,SAAS,EAAEb,OAAO,CAACc,IAAK;IAAAC,QAAA,eAC3BrB,OAAA,CAACJ,IAAI;MAAC0B,SAAS;MAACC,OAAO,EAAE,CAAE;MAAAF,QAAA,eACzBrB,OAAA,CAACJ,IAAI;QAAC4B,IAAI;QAACC,EAAE,EAAE,EAAG;QAACC,EAAE,EAAE,CAAE;QAAAL,QAAA,gBACvBrB,OAAA,CAACL,WAAW;UAAAgC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eACf9B,OAAA,CAACN,QAAQ;UAAAiC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACR;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEV,CAAC;AAAC5B,EAAA,CArCID,IAAI;EAAA,QACSV,WAAW,EACdC,WAAW,EACTK,SAAS;AAAA;AAAAkC,EAAA,GAHrB9B,IAAI;AAuCV,eAAeA,IAAI;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}